buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.1"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    }
}

version "0.1"
group "rocketgo"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.3.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.3.Final"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.1"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
	compile 'org.grails.plugins:spring-security-core:3.1.2'

    compile('com.lowagie:itext:2.1.7')

    compile('net.sf.jasperreports:jasperreports:5.6.1') {
        exclude module: 'antlr'
        exclude module: 'commons-logging'
        exclude module: 'ant'
        exclude module: 'mondrian'
        exclude module: 'commons-javaflow'
        exclude module: 'barbecue'
        exclude module: 'xml-apis-ext'
        exclude module: 'xml-apis'
        exclude module: 'xalan'
        exclude module: 'groovy-all'
        exclude module: 'hibernate'
        exclude module: 'saaj-api'
        exclude module: 'servlet-api'
        exclude module: 'xercesImpl'
        exclude module: 'xmlParserAPIs'
        exclude module: 'spring-core'
        exclude module: 'bsh'
        exclude module: 'spring-beans'
        exclude module: 'jaxen'
        exclude module: 'barcode4j'
        exclude module: 'batik-svg-dom'
        exclude module: 'batik-xml'
        exclude module: 'batik-awt-util'
        exclude module: 'batik-dom'
        exclude module: 'batik-css'
        exclude module: 'batik-gvt'
        exclude module: 'batik-script'
        exclude module: 'batik-svggen'
        exclude module: 'batik-util'
        exclude module: 'batik-bridge'
        exclude module: 'persistence-api'
        exclude module: 'jdtcore'
        exclude module: 'bcmail-jdk16'
        exclude module: 'bcprov-jdk16'
        exclude module: 'bctsp-jdk16'
        exclude module: 'bcmail-jdk14'
        exclude module: 'bcprov-jdk14'
        exclude module: 'bctsp-jdk14'
        exclude module: 'xmlbeans'
        exclude module: 'olap4j'
    }

    compile 'com.github.jsimone:webapp-runner:8.5.11.3'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

task stage() {
    dependsOn clean, war
}
tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.war")
}

war.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.compile) {
        include "webapp-runner*"
    }
}

stage.dependsOn(copyToLib)